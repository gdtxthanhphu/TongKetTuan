import streamlit as st
import google.generativeai as genai
import pandas as pd


def init_gemini():
    """Kh·ªüi t·∫°o Gemini b·∫±ng API key trong secrets.toml"""
    if "gemini_api_key" not in st.secrets:
        st.error("‚ùå Thi·∫øu gemini_api_key trong secrets.toml.")
        st.stop()
    genai.configure(api_key=st.secrets["gemini_api_key"])


def render_chat_box(score_df: pd.DataFrame):
    """Hi·ªÉn th·ªã Chat Box cho ph√©p Gemini truy c·∫≠p d·ªØ li·ªáu b·∫£ng ƒëi·ªÉm"""
    st.subheader("üí¨ Tr√≤ chuy·ªán c√πng Tr·ª£ l√Ω AI (Gemini)")
    st.markdown("H√£y h·ªèi v·ªÅ t√¨nh h√¨nh c√°c l·ªõp üëá")

    # --- Chu·∫©n h√≥a d·ªØ li·ªáu ---
    df = score_df.copy()
    df["T·ªïng ƒëi·ªÉm"] = pd.to_numeric(df["T·ªïng ƒëi·ªÉm"], errors="coerce").fillna(0)
    df = df.head(300)  # tr√°nh g·ª≠i qu√° nhi·ªÅu d√≤ng
    data_text = df.to_json(orient="records", force_ascii=False)

    # --- Kh·ªüi t·∫°o l·ªãch s·ª≠ h·ªôi tho·∫°i n·∫øu ch∆∞a c√≥ ---
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = [
            {
                "role": "user",
                "parts": [{
                    "text": (
                        "B·∫°n l√† tr·ª£ l√Ω ·∫£o c·ªßa Ban Gi√°m Hi·ªáu, gi√∫p gi√°o vi√™n ph√¢n t√≠ch d·ªØ li·ªáu h·ªçc t·∫≠p "
                        "v√† n·ªÅ n·∫øp h·ªçc sinh. H√£y ƒë·ªçc d·ªØ li·ªáu b·∫£ng ƒëi·ªÉm sau ƒë√¢y v√† ghi nh·ªõ n√≥ ƒë·ªÉ tr·∫£ l·ªùi "
                        "c√°c c√¢u h·ªèi ti·∫øp theo d·ª±a tr√™n d·ªØ li·ªáu th·∫≠t c·ªßa tr∆∞·ªùng."
                    )
                }]
            },
            {
                "role": "user",
                "parts": [{
                    "text": f"D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu b·∫£ng ƒëi·ªÉm (JSON):\n{data_text}\n"
                            "H√£y ghi nh·ªõ v√† s·ª≠ d·ª•ng khi tr·∫£ l·ªùi c√°c c√¢u h·ªèi."
                }]
            }
        ]

    # --- Hi·ªÉn th·ªã l·ªãch s·ª≠ chat (·∫©n ph·∫ßn kh·ªüi t·∫°o d·ªØ li·ªáu) ---
    for msg in st.session_state.chat_history:
        text = msg["parts"][0]["text"]

        # B·ªè qua tin nh·∫Øn kh·ªüi t·∫°o ban ƒë·∫ßu
        if "D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu b·∫£ng ƒëi·ªÉm" in text or "B·∫°n l√† tr·ª£ l√Ω ·∫£o c·ªßa Ban Gi√°m Hi·ªáu" in text:
            continue

        # Hi·ªÉn th·ªã ph·∫ßn chat th·∫≠t s·ª±
        with st.chat_message("user" if msg["role"] == "user" else "assistant"):
            st.markdown(text)

    # --- √î nh·∫≠p chat ---
    prompt = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n v·ªÅ d·ªØ li·ªáu...")
    if prompt:
        # Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng
        user_msg = {"role": "user", "parts": [{"text": prompt}]}
        st.session_state.chat_history.append(user_msg)

        with st.chat_message("user"):
            st.markdown(prompt)

        # G·ªçi AI Gemini
        with st.chat_message("assistant"):
            with st.spinner("ü§ñ ƒêang ph√¢n t√≠ch d·ªØ li·ªáu..."):
                try:
                    model = genai.GenerativeModel("gemini-2.5-pro")
                    response = model.generate_content(st.session_state.chat_history)
                    ai_text = response.text.strip() if response.text else "Kh√¥ng c√≥ ph·∫£n h·ªìi."
                except Exception as e:
                    ai_text = f"‚ùå L·ªói khi g·ªçi Gemini: {e}"

                st.markdown(ai_text)

        # L∆∞u ph·∫£n h·ªìi (vai tr√≤ 'model' thay v√¨ 'assistant' ƒë·ªÉ ph√π h·ª£p API)
        st.session_state.chat_history.append(
            {"role": "model", "parts": [{"text": ai_text}]}
        )
