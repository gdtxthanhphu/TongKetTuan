import streamlit as st
import google.generativeai as genai
import pandas as pd


def init_gemini():
    """Kh·ªüi t·∫°o Gemini b·∫±ng API key trong secrets.toml"""
    if "gemini_api_key" not in st.secrets:
        st.error("‚ùå Thi·∫øu gemini_api_key trong secrets.toml.")
        st.stop()
    genai.configure(api_key=st.secrets["gemini_api_key"])


def render_chat_box(score_df: pd.DataFrame):
    """Hi·ªÉn th·ªã khung chat cho ph√©p Gemini truy c·∫≠p d·ªØ li·ªáu b·∫£ng ƒëi·ªÉm th·ª±c t·∫ø"""
    st.markdown("H√£y h·ªèi v·ªÅ t√¨nh h√¨nh h·ªçc t·∫≠p, vi ph·∫°m, ƒëi·ªÉm trung b√¨nh... üëá")

    # --- Chu·∫©n h√≥a d·ªØ li·ªáu ---
    df = score_df.copy()
    df["T·ªïng ƒëi·ªÉm"] = pd.to_numeric(df["T·ªïng ƒëi·ªÉm"], errors="coerce").fillna(0)
    df = df.head(300)
    data_text = df.to_json(orient="records", force_ascii=False)

    # === T·∫†CH CHAT RI√äNG CHO T·ª™NG NG∆Ø·ªúI / L·ªöP ===
    username = st.session_state.get("username", "guest")
    role = st.session_state.get("role", "user").lower()
    class_name = st.session_state.get("class_name", "all")

    user_key = f"chat_history_{username}_{class_name}"

    # --- ƒê·ªãnh nghƒ©a gi·ªçng n√≥i AI ---
    if role == "admin":
        personality = (
            "B·∫°n l√† Tr·ª£ l√Ω Ban Gi√°m ƒê·ªëc. "
            "H√£y ph√¢n t√≠ch d·ªØ li·ªáu h·ªçc t·∫≠p, n·ªÅ n·∫øp c·ªßa to√†n tr∆∞·ªùng m·ªôt c√°ch t·ªïng quan, "
            "v·ªõi gi·ªçng trang tr·ªçng, chuy√™n nghi·ªáp. "
            "N·∫øu c√≥ s·ªë li·ªáu c·ª• th·ªÉ, h√£y ƒë∆∞a ra nh·∫≠n x√©t theo tu·∫ßn ho·∫∑c theo l·ªõp."
        )
    else:
        personality = (
            f"B·∫°n l√† Tr·ª£ l√Ω Gi√°o vi√™n ch·ªß nhi·ªám c·ªßa l·ªõp {class_name}. "
            "H√£y n√≥i v·ªõi gi·ªçng th√¢n thi·ªán, g·∫ßn g≈©i, nh·∫π nh√†ng. "
            "Tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu th·∫≠t c·ªßa l·ªõp, ƒë∆∞a ra nh·∫≠n x√©t c·ª• th·ªÉ t·ª´ng tu·∫ßn, "
            "v√† c√≥ th·ªÉ ƒë·ªông vi√™n h·ªçc vi√™n n·∫øu ph√π h·ª£p."
        )

    # --- T·∫°o h·ªôi tho·∫°i kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥ ---
    if user_key not in st.session_state:
        st.session_state[user_key] = [
            {
                "role": "user",
                "parts": [{"text": personality}],
            },
            {
                "role": "user",
                "parts": [{
                    "text": f"D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu b·∫£ng ƒëi·ªÉm (JSON):\n{data_text}\n"
                            "H√£y ghi nh·ªõ v√† s·ª≠ d·ª•ng khi tr·∫£ l·ªùi c√°c c√¢u h·ªèi."
                }]
            }
        ]

    chat_history = st.session_state[user_key]

    # --- Hi·ªÉn th·ªã l·ªãch s·ª≠ chat ---
    for msg in chat_history:
        text = msg["parts"][0]["text"]
        if "D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu b·∫£ng ƒëi·ªÉm" in text or "Tr·ª£ l√Ω" in text:
            continue
        with st.chat_message("user" if msg["role"] == "user" else "assistant"):
            st.markdown(text)

    # --- √î nh·∫≠p chat ---
    prompt = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n v·ªÅ d·ªØ li·ªáu...")
    if prompt:
        user_msg = {"role": "user", "parts": [{"text": prompt}]}
        chat_history.append(user_msg)

        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            with st.spinner("ü§ñ Tr·ª£ l√Ω ƒëang suy nghƒ©..."):
                try:
                    model = genai.GenerativeModel("gemini-2.5-pro")
                    response = model.generate_content(chat_history)
                    ai_text = response.text.strip() if response.text else "Kh√¥ng c√≥ ph·∫£n h·ªìi."
                except Exception as e:
                    ai_text = f"‚ùå L·ªói khi g·ªçi Gemini: {e}"

                st.markdown(ai_text)

        chat_history.append({"role": "model", "parts": [{"text": ai_text}]})
